package com.ds.sort;

import java.util.Arrays;

/*
 * Insertion Sort: 
 * The idea behind is that in each iteration, it consumes one element from the input elements, removes it and 
 * finds its correct position i.e., where it belongs in the sorted list and places it there.

It iterates the array by growing the sorted list behind it at each iteration. It checks the current element with the 
largest value in the sorted list. If the current element is larger, then it leaves the element at its place and moves to the 
next element else it finds its correct position in the sorted list and moves it to that position.
It is done by shifting all the elements which are larger than the current element to one position ahead.
 
 Notice that we have a double test for the inner loop. The first condition is to ensure that we don’t run off the beginning of the array,
 and the second one is to stop the loop once we reach the correct spot to insert the item. 
Important :  We count from the right in this inner loop, so that we can enforce sort stability (we don’t want to find the first of a set of equal items, we want to find the last)

Time Complexity : 
Worst Case : O(n2) ,Average Case : O(n2) , Best Case : O(n) 
Space Complexity :
Worst : O(1)

Stable Sort  

https://www.youtube.com/watch?v=INHF_5RIxTE
 */
public class InsertionSort {
	 
    public static void main(String a[]){
        int[] arr1 = {10,34,2,56,7,67,88,42};
        
        //Method : 1
		System.out.println(Arrays.toString(arr1));
		insertsort(arr1);
		System.out.println(Arrays.toString(arr1));
		
        //Method : 2
        System.out.println("Input Array :"+Arrays.toString(arr1));
        int[] arr2 = doInsertionSort(arr1);
        for(int i:arr2){
            System.out.print(i);
            System.out.print(", ");
        }
    }

    //Method 1 : Efficient Way 
	public static void insertsort(int[] arr) {
		
		for(int i=1;i<arr.length;i++){
			
			int temp=arr[i];
			int j=i;
			while((j>0) && (temp < arr[j-1])){
				arr[j]=arr[j-1];
				j--;
			}
			arr[j]=temp;
		}
	}
	
    //Method 2
    public static int[] doInsertionSort(int[] input){
         
        int temp;
        for (int i = 1; i < input.length; i++) {
            for(int j = i ; j > 0 ; j--){
                if(input[j] < input[j-1]){
                    temp = input[j];
                    input[j] = input[j-1];
                    input[j-1] = temp;
                }
            }
            //System.out.println(Arrays.toString(input));
        }
        return input;
    }
    
    
}
